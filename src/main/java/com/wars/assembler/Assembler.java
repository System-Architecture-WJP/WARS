package com.wars.assembler;

import com.wars.instruction.Instruction;
import com.wars.instruction.InstructionRegistry;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Assembler {
    private final Scanner inputScanner;
    private final OutputStream outputStream;
    private int currLine = 0;

    public Assembler(InputStream inputStream, OutputStream outputStream) {
        inputScanner = new Scanner(inputStream);
        this.outputStream = outputStream;
    }
    
    public void assembleToBinaryString() {
        PrintStream outputPrintStream = new PrintStream(outputStream);
        
        for (List<Instruction> list = advance();
                list != null; list = advance()) {
            String output = list.stream()
                    .map(Instruction::toBinaryString)
                    .collect(Collectors.joining("\n"));
            outputPrintStream.println(output);
        }
    }
    
    /*
     * Advances the assembler to the next line of input.
     * Returns a list of instructions generated by that line (may be empty).
     * Returns null if the input has ended.
     */
    private List<Instruction> advance() {
        if (!inputScanner.hasNextLine()) {
            return null;
        }

        String line = inputScanner.nextLine().trim();
        currLine++;

        if (line.isBlank() || line.startsWith("#")) {
            return Collections.emptyList();
        }

        String[] split = line.split("\\s+");

        if (split.length == 1 && split[0].endsWith(":")) {
            // TODO: Handle label definition
            return Collections.emptyList();
        }

        if (split[0].equals("macro:")) {
            return handleMacro(line);
        }
        
        String mnemonic = split[0];
        String[] operands = Arrays.copyOfRange(split, 1, split.length);
        Instruction instruction = InstructionRegistry.create(mnemonic, operands);
        
        List<Instruction> result = new ArrayList<>();
        result.add(instruction);
        return result;
    }
    
    private List<Instruction> handleMacro(String line) {
        // TODO: implement this function
        return Collections.emptyList();
    }

}
